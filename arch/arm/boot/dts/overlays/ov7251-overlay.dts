// SPDX-License-Identifier: GPL-2.0-only
// Definitions for OV7251 camera module on VC I2C bus
/dts-v1/;
/plugin/;

#include <dt-bindings/gpio/gpio.h>

/{
	compatible = "brcm,bcm2835";

	i2c_frag: fragment@0 {
		target = <&i2c_csi_dsi>;
		__overlay__ {
			#address-cells = <1>;
			#size-cells = <0>;
			status = "okay";

			ov7251: ov7251@60 {
				compatible = "ovti,ov7251";
				reg = <0x60>;
				status = "okay";

				clocks = <&cam1_clk>;
				clock-names = "xclk";
				clock-frequency = <24000000>;

				vdddo-supply = <&cam_dummy_reg>;
				vdda-supply = <&cam1_reg>;
				vddd-supply = <&cam_dummy_reg>;

				rotation = <0>;
				orientation = <2>;

				port {
					ov7251_0: endpoint {
						remote-endpoint = <&csi1_ep>;
						clock-lanes = <0>;
						data-lanes = <1>;
						clock-noncontinuous;
						link-frequencies =
							/bits/ 64 <240000000>;
					};
				};
			};
		};
	};

	csi_frag: fragment@1 {
		target = <&csi1>;
		csi: __overlay__ {
			status = "okay";
			brcm,media-controller;

			port {
				csi1_ep: endpoint {
					remote-endpoint = <&ov7251_0>;
					data-lanes = <1>;
				};
			};
		};
	};

	fragment@2 {
		target = <&i2c0if>;
		__overlay__ {
			status = "okay";
		};
	};

	fragment@3 {
		target = <&i2c0mux>;
		__overlay__ {
			status = "okay";
		};
	};

	clk_frag: fragment@4 {
		target = <&cam1_clk>;
		__overlay__ {
			status = "okay";
			clock-frequency = <24000000>;
		};
	};

	__overrides__ {
		rotation = <&ov7251>,"rotation:0";
		orientation = <&ov7251>,"orientation:0";
		media-controller = <&csi>,"brcm,media-controller?";
		cam0 = <&i2c_frag>, "target:0=",<&i2c_vc>,
		       <&csi_frag>, "target:0=",<&csi0>,
		       <&clk_frag>, "target:0=",<&cam0_clk>,
		       <&ov7251>, "clocks:0=",<&cam0_clk>,
		       <&ov7251>, "vdda-supply:0=",<&cam0_reg>;
	};
};
