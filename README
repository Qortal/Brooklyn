Why Brooklyn Kernel for Raspberry Pi SBC?

In order for a layman to understand what is with all this kernel talk, we need to understand the very basics of 
computing hardware. Your Pi is a tiny computer and the Operating System (Linux aka the Kernel itself) needs something
to view, manage, divert, call, stop, forward, etc in order for it to operate. That "something" is the kernel. 
Kernel is Greek for heart, so that makes the kernel the heart of a system, i.e the Operating Systems. There are 
kernels in various Operating Systems which are optimized for general purpose use such as watching YouTube  videos while 
listening to your favorite tracks on SoundCloud or Spotify and then there are kernels which are meant to handle 
processes in the background, like intense memory management, running a web server or an email server. A Windows 
Operating System kernel is focused more towards multimedia and gaming while Linux Desktop kernel is focused more 
towards the Graphical User Interface (GUI). In computing, Linux Kernel itself is Linux and various tools and utilities 
that run on the kernel are user space tools to just tools.

Qortal uses certain algorithms and runtime methods to exist which may not be eco friendly for general purpose computing
devices (PC, MAC, SBC) and this causes a serious issue of performance degradation which may result in lockups, issues 
with peer synchronization, the processor waiting for resource allocation (I/O wait). As the Qortal Core evolves, the
kernel needs to be constantly updated to keep up with the changes in the Core. On top of that, the kernel needs to be
good enough to run the Qortal UI parallel with the Core. That's why Brooklyn Kernel is extremely tuned, built and 
customized specifically for Qortal Core and Qortal UI for the Raspberry Pi. Countless hours are spent weekly on 
Brooklyn development for performance, security and interoperability.

The end user may not be aware of what is going on in the background, but Brooklyn performs upto 13 times better than
a standard kernel for Raspberry Pi as we know that these Pi devices make the most of nodes on the Qortal blockchain
and they must be solid as a tank. All trolling aside, this has been quite a journey since 2017 as we see Brooklyn 
evolve and improve to keep the low powered (14 watts maximum) Pi devices running smoothly.

My name is Scare Crowe and I approve this message. 

-_-

Brooklyn Sean's Poose , Qortal Linux 6.2.10 64bit RPI4 by Scare Crowe
=========================================================================
* Kernel 6.2.10 for Qortal with optimizations and better re-org handling ( Under Development )
* Kernel 6.0.11 for Qortal with mempow hard crunch handling.
* Standard kernel will not be able to handle upcoming mempow hence this is released.
* This build is optimized for the core version 3.5 and onwards. Welcome aboard Digibyte, Raven and ARRR.
* The entire system is now arm64 instead of previous hard float 64 release (kern,userspace) for ARRR chain support.
* Re-written DRM with crpyto advantage for Qortal Core (Became active in torchie release for reduced CPU overhead)
* Mass staging tree update starting 6.0.00-rc1.
* New Hardware support i.e, third party wifi 7 and bluetooth dongles, 4k monitors, PnP NVME adapters.
* Usual Improvements to various Filesystems, run-time verifications for prefetch data techniqes.
* Scheduler changes for better java thread migration across logical SoC cores.
* Storage and file systems enhancement enhances memory handling, garbage collection optimization and more.
* VC4 parallel scalar pipeline rendering and complete redo of qortal-ui optimizations.
* Overall upto 18 % performance gain from previous releases of brooklyn (now also used in Golem Codes system)
* Rust language is now the default second language but still EXPERIMENTAL.
* Qortal Core and Qortal UI algorithms are now native and not as application runtime loadable modules. 

This release brings more optimizations to QortalOS. Too many to name in a single README.

Leaving spectre workaround unchanged as the workaround reduces the kernel performance by 50% rendering it useless for Intel, AMD and ARM.  

There is no fix for Spectre 2 vulnerability yet. 

12/12/2022 - Adding resilience against network interruptions. 

Reference : https://www.neowin.net/news/amd-issues-fix-for-spectre-v2-which-confirms-nearly-every-desktop-cpu-is-still-vulnerable/


		  GNUK Token Implementation
		 Source: http://www.gniibe.org

                     SWD port
                        (GND, SWD-CLK, SWD-IO)
    Power port +---------------------+
           Vdd |[]           []()() -------+
           GND |[]                  |      |
               |()() I/O port       | USB  |
               |      (PA2, PA3)    |      |
               |                    -------+
               +---------------------+

http://git.gniibe.org/gitweb/?p=gnuk/fst-01.git

If you rely heavily on VPN to bypass your regional filters then it will be a good idea to have extra entropy in hand. Any OpenSource Entropy stick should work on Brooklyn from now.

Note: Use raspi-config to setup your wifi or add plamsa desktop network manager with "sudo apt install plasma-nm" . It is assumed that you  will be using an ethernet/network cable or keyboard and mouse to setup and configure your desktop. For headless image, you only need SSH access to your hardwired device. If you are facing Link Not Ready message still then simply reboot your Brooklyn device after doing a "sudo apt purge openresolv dhcpcd5". 

You can get a release and flash it directly on your USB 3 hard drive with Balena Etcher. The default image size is meant for a 32GB microSD card. If you have a bigger microSD card then after login do a "sudo raspi-config", head over to Advacned and resize the file system. Same can be done for a GPT partitioned USB 3 hard drive/SSD. Keep in mind that MBR drives have a size limit per block partition. For 4TB or bigger drive you might want to use GPT instead. If you have purchased a Raspberry Pi 4 elsewhere then you might have to flash the boot loader to do a mass storaeg boot. Ask The Moose on the loose for help (better not as he won'g give a fuck anyways).

Pro Tip: Do not add another Desktop overlay or replace the current with something else. It will make the system unstable and unreliable. What comes pre-shipped with the packaged image is built around the kernel and whatever else was done with it.

Legacy QortalOS Linux 5.60.14
=============================

There are several guides for kernel developers and users. These guides can
be rendered in a number of formats, like HTML and PDF. Please read
Documentation/admin-guide/README.rst first.

In order to build the documentation, use ``make htmldocs`` or
``make pdfdocs``.  The formatted documentation can also be read online at:

    https://www.kernel.org/doc/html/latest/

There are various text files in the Documentation/ subdirectory,
several of them using the Restructured Text markup notation.

Please read the Documentation/process/changes.rst file, as it contains the
requirements for building and running the kernel, and information about
the problems which may result by upgrading your kernel.
